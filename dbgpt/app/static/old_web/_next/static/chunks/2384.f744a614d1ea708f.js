"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[2384],{47578:function(e,E,n){n.d(E,{Ht:function(){return s},Lx:function(){return a},Pf:function(){return r},k8:function(){return S},lW:function(){return i},yD:function(){return T}});var t=n(812);function a(e,E){return{label:e,range:E,insertText:e,kind:t.Mj.CompletionItemKind.Keyword}}function r(e,E="",n=!1,a){let r=n?[E,e].filter(Boolean).join("."):e;return{label:{label:r,description:"Table",detail:" "+E},range:a,insertText:r,kind:t.Mj.CompletionItemKind.Class}}function T(e,E,n="",a){let r=[n,E].filter(Boolean).join(".");return{label:{label:e,description:"Column",detail:" "+r},range:a,insertText:e,kind:t.Mj.CompletionItemKind.Field}}function s(e,E){var n,a;let r=(null===(n=e.params)||void 0===n?void 0:n.map((e,E)=>`\${${E+1}:${"string"==typeof e?e:e.name}}`).join(", "))||"",T=(null===(a=e.params)||void 0===a?void 0:a.map((e,E)=>`${"string"==typeof e?e:e.name}`).join(", "))||"";return{label:{label:e.name,description:"Function",detail:" "+e.desc},kind:t.Mj.CompletionItemKind.Function,documentation:`${e.name}(${T})`,insertText:`${e.name}(${r})`,insertTextRules:t.Mj.CompletionItemInsertTextRule.InsertAsSnippet,range:E}}function S(e,E){return{label:e.label,kind:t.Mj.CompletionItemKind.Snippet,documentation:e.documentation,insertText:e.insertText,insertTextRules:t.Mj.CompletionItemInsertTextRule.InsertAsSnippet,range:E}}function i(e,E){return{label:e,kind:t.Mj.CompletionItemKind.Module,detail:"Schema",insertText:e,range:E}}},54768:function(e,E,n){n.d(E,{q:function(){return t}});class t{constructor(e){{let E=URL.createObjectURL(new Blob([`importScripts(${JSON.stringify(e.toString())});`],{type:"application/javascript"}));this.worker=new Worker(E),URL.revokeObjectURL(E)}}getWorker(){return this.worker}}},5601:function(e,E,n){n.d(E,{X:function(){return s},m:function(){return T}});var t=n(81065),a=function(e,E,n,t){return new(n||(n=Promise))(function(a,r){function T(e){try{S(t.next(e))}catch(e){r(e)}}function s(e){try{S(t.throw(e))}catch(e){r(e)}}function S(e){var E;e.done?a(e.value):((E=e.value)instanceof n?E:new n(function(e){e(E)})).then(T,s)}S((t=t.apply(e,E||[])).next())})};function r(e,E,r){return a(this,void 0,void 0,function*(){let{SQLType:a,plugins:T}=yield Promise.all([n.e(2425),n.e(4849),n.e(7356),n.e(1414),n.e(1586),n.e(8010),n.e(7816)]).then(n.bind(n,19357)),s={[t.$.OB_MySQL]:a.OBMySQL,[t.$.MySQL]:a.MySQL,[t.$.OB_Oracle]:a.Oracle},S=T.format({sql:e,type:s[E],delimiter:r});return S})}class T{constructor(e,E){this.plugin=null,this.type=t.$.OB_MySQL,this.plugin=e,this.type=E}provideDocumentFormattingEdits(e,E,n){let t=e.getValue(),T=e.getFullModelRange();return new Promise(E=>a(this,void 0,void 0,function*(){var n,a;let s=yield r(t,this.type,(null===(a=null===(n=this.plugin)||void 0===n?void 0:n.modelOptionsMap.get(e.id))||void 0===a?void 0:a.delimiter)||";");E([{range:T,text:s}])}))}}class s{constructor(e,E){this.plugin=null,this.type=t.$.OB_MySQL,this.plugin=e,this.type=E}provideDocumentRangeFormattingEdits(e,E,n,t){let T=e.getValueInRange(E);return new Promise(n=>a(this,void 0,void 0,function*(){var n,t;let a=yield r(T,this.type,(null===(t=null===(n=this.plugin)||void 0===n?void 0:n.modelOptionsMap.get(e.id))||void 0===t?void 0:t.delimiter)||";");return[{range:E,text:a}]}))}}},2384:function(e,E,n){n.r(E),n.d(E,{setup:function(){return L}});var t=n(812),a=n(81065),r=n(47578);let T=[{name:"CURDATE",params:[],desc:"返回当前日期，不含时间部分。"},{name:"CURRENT_DATE",params:[],desc:"返回当前日期，不含时间部分。"},{name:"CURRENT_TIME",params:[{name:"scale"}],desc:"返回当前时间，不含日期部分。"},{name:"CURRENT_TIMESTAMP",params:[{name:"scale"}],desc:"返回当前日期时间，考虑时区设置。"},{name:"CURTIME",params:[],desc:"返回当前时间，不含日期部分。"},{name:"DATE_ADD",params:[{name:"date"},{name:"INTERVAL"}],desc:"日期时间的算术计算。"},{name:"DATE_FORMAT",params:[{name:"date"},{name:"format"}],desc:"将日期时间以指定格式输出。"},{name:"DATE_SUB",params:[{name:"date"},{name:"INTERVAL"}],desc:"日期时间的算术计算。"},{name:"DATEDIFF",params:[{name:"date1"},{name:"date2"}],desc:"返回 date1 和 date2 之间的天数。"},{name:"EXTRACT",body:"EXTRACT(${1:unit} FROM ${2:date})",desc:"以整数类型返回 date 的指定部分值。"},{name:"FROM_DAYS",params:[{name:"N"}],desc:"返回指定天数 N 对应的 DATE 值。"},{name:"FROM_UNIXTIME",params:[{name:"unix_timestamp"},{name:"format"}],desc:"返回指定格式的日期时间字符串。"},{name:"MONTH",params:[{name:"date"}],desc:"返回 date 的月份信息。"},{name:"NOW",params:[{name:"scale"}],desc:"返回当前日期时间，考虑时区设置。"},{name:"PERIOD_DIFF",params:[{name:"p1"},{name:"p2"}],desc:"以月份位单位返回两个日期之间的间隔。"},{name:"STR_TO_DATE",params:[{name:"str"},{name:"format"}],desc:"使用 format 将 str 转换为 DATETIME 值、DATE 值、或 TIME 值。"},{name:"TIME",params:[{name:"datetime"}],desc:"以 TIME 类型返回 datetime 的时间信息。"},{name:"TIME_TO_USEC",params:[{name:"date"}],desc:"将 date 值转换为距离 1970-01-01 00:00:00.000000 的微秒数，考虑时区信息。"},{name:"TIMEDIFF",params:[{name:"date1"},{name:"date2"}],desc:"以 TIME 类型返回两个日期时间的时间间隔。"},{name:"TIMESTAMPDIFF",params:[{name:"unit"},{name:"date1"},{name:"date2"}],desc:"以 unit 为单位返回两个日期时间的间隔。"},{name:"TIMESTAMPADD",params:[{name:"unit"},{name:"interval_expr"},{name:"date"}],desc:"日期时间的算术计算。"},{name:"TO_DAYS",params:[{name:"date"}],desc:"返回指定 date 值对应的天数。"},{name:"USEC_TO_TIME",params:[{name:"usec"}],desc:"将 usec 值转换为 TIMESTAMP 类型值。"},{name:"UNIX_TIMESTAMP",params:[{name:"date"}],desc:"返回指定时间距离 '1970-01-01 00:00:00' 的秒数，考虑时区。"},{name:"UTC_TIMESTAMP",params:[],desc:"返回当前 UTC 时间。"},{name:"YEAR",params:[{name:"date"}],desc:"返回 date 值的年份信息。"},{name:"CONCAT",params:[{name:"str"}],desc:"把多个字符串连接成一个字符串。"},{name:"CONCAT_WS",params:[{name:"separator"},{name:"str"}],desc:"把多个字符串连接成一个字符串，相邻字符串间使用 separator 分隔。"},{name:"FORMAT",params:[{name:"x"},{name:"d"}],desc:"把数字 X 格式化为“#,###,###.##”格式，四舍五入到 D 位小数，并以字符串形式返回结果（如果整数部分超过三位，会用“,”作为千分位分隔符）。"},{name:"SUBSTR",params:[{name:"str"},{name:"pos"}],desc:"返回 str 的子字符串，起始位置为 pos，长度为 len。"},{name:"SUBSTRING",params:[{name:"str"},{name:"pos"}],desc:"返回 str 的子字符串，起始位置为 pos，长度为 len。"},{name:"TRIM",params:[{name:"x"}],desc:"删除字符串所有前缀和/或后缀，默认为 BOTH。"},{name:"LTRIM",params:[{name:"str"}],desc:"删除字符串左侧的空格。"},{name:"RTRIM",params:[{name:"str"}],desc:"删除字符串右侧的空格。"},{name:"ASCII",params:[{name:"str"}],desc:"返回字符串最左侧字符的 ASCII 码。"},{name:"ORD",params:[{name:"str"}],desc:"返回字符串最左侧字符的字符码。"},{name:"LENGTH",params:[{name:"str"}],desc:"返回 str 的字节长度。"},{name:"CHAR_LENGTH",params:[{name:"str"}],desc:"返回字符串包含的字符数。"},{name:"UPPER",params:[{name:"str"}],desc:"将字符串中的小写字母转化为大写字母。"},{name:"LOWER",params:[{name:"str"}],desc:"将字符串中的大写字母转化为小写字母。"},{name:"HEX",params:[{name:"str"}],desc:"将数字或字符串转化为十六进制字符串。"},{name:"UNHEX",params:[{name:"str"}],desc:"将十六进制字符串转化为正常字符串。"},{name:"MD5",params:[{name:"str"}],desc:"返回字符串的 MD5 值。"},{name:"INT2IP",params:[{name:"int_value"}],desc:"将整数内码转换成 IP 地址。"},{name:"IP2INT",params:[{name:"ip_addr"}],desc:"将 IP 地址转换成整数内码。"},{name:"LIKE",body:"LIKE ${1:str}",desc:"字符串通配符匹配。"},{name:"REGEXP",body:"REGEXP ${1:str}",desc:"正则匹配。"},{name:"REPEAT",params:[{name:"str"},{name:"count"}],desc:"返回 str 重复 count 次组成的字符串。"},{name:"SPACE",params:[{name:"N"}],desc:"返回包含 N 个空格的字符串。"},{name:"SUBSTRING_INDEX",params:[{name:"str"},{name:"delim"},{name:"count"}],desc:"在定界符 delim 以及 count 出现前，从字符串 str 返回字符串。"},{name:"LOCATE",params:[{name:"substr"},{name:"str"}],desc:"第一个语法返回字符串 str 中子字符串 substr 的第一个出现位置。"},{name:"POSITION",params:[{name:"substr"},{name:"str"}],desc:"第一个语法返回字符串 str 中子字符串 substr 的第一个出现位置。"},{name:"INSTR",params:[{name:"str"},{name:"substr"}],desc:"返回字符串 str 中子字符串的第一个出现位置。"},{name:"REPLACE",params:[{name:"str"},{name:"from_str"},{name:"to_str"}],desc:"返回字符串 str 以及所有被字符 to_str 替代的字符串 from_str。"},{name:"FIELD",params:[{name:"str"}],desc:"返回参数 str 在 str1, str2, str3,… 列表中的索引位置（从 1 开始的位置）。"},{name:"ELT",params:[{name:"N"},{name:"str"}],desc:"若 N=1，则返回值为 str1；若 N=2，则返回值为 str2；以此类推。"},{name:"INSERT",params:[{name:"str1"},{name:"pos"},{name:"len"},{name:"str2"}],desc:"返回字符串 str1，字符串中起始于 pos 位置，长度为 len 的子字符串将被 str2 取代。"},{name:"LPAD",params:[{name:"str"},{name:"len"},{name:"padstr"}],desc:"用指定字符串 padstr，在左侧填充字符串 str 到指定长度 len。"},{name:"RPAD",params:[{name:"str"},{name:"len"},{name:"padstr"}],desc:"用指定字符串 padstr，在右侧填充字符串 str 到指定长度 len。"},{name:"UUID",params:[],desc:"生成一个全局唯一 ID。"},{name:"BIN",params:[{name:"N"}],desc:"返回数字 N 的二进制形式。"},{name:"QUOTE",params:[{name:"str"}],desc:"引用一个字符串以产生一个结果可以作为 SQL 语句中正确地转义数据值。"},{name:"REGEXP_SUBSTR",params:[{name:"str"},{name:"pattern"}],desc:"在 str 中搜索匹配正则表达式 pattern 的子串，子串不存在返回 NULL。"},{name:"CAST",body:"CAST(${1:expr} AS ${2:type})",desc:"将某种数据类型的表达式显式转换为另一种数据类型。"},{name:"ROUND",params:[{name:"X"}],desc:"返回一个数值，四舍五入到指定的长度或精度。"},{name:"CEIL",params:[{name:"expr"}],desc:"返回大于或者等于指定表达式的最小整数。"},{name:"FLOOR",params:[{name:"expr"}],desc:"返回小于或者等于指定表达式的最大整数。"},{name:"ABS",params:[{name:"expr"}],desc:"绝对值函数，求表达式绝对值，函数返回值类型与数值表达式的数据类型相同。"},{name:"NEG",params:[{name:"expr"}],desc:"求补函数，对操作数执行求补运算：用零减去操作数，然后结果返回操作数。"},{name:"SIGN",params:[{name:"X"}],desc:"SIGN(X) 返回参数作为 -1、 0 或 1 的符号，该符号取决于 X 的值为负、零或正。"},{name:"CONV",params:[{name:"N"},{name:"from_base"},{name:"to_base"}],desc:"不同数基间转换数字。"},{name:"MOD",params:[{name:"N"},{name:"M"}],desc:"取余函数。"},{name:"POW",params:[{name:"X"},{name:"Y"}],desc:"返回 X 的 Y 次方。"},{name:"POWER",params:[{name:"X"},{name:"Y"}],desc:"返回 X 的 Y 次方。"},{name:"RAND",params:[{name:"value1"}],desc:"RAND([N]) 函数接受 0 个或者 1 个参数（N 被称为随机数种子），返回一个范围是 [0,1.0) 的随机浮点数。"},{name:"GREATEST",params:[{name:"value1"}],desc:"返回参数的最大值，和函数 LEAST() 相对。"},{name:"LEAST",params:[{name:"value1"}],desc:"返回参数的最小值，和函数 GREATEST() 相对。"},{name:"ISNULL",params:[{name:"expr"}],desc:"如果参数 expr 为 NULL，那么 ISNULL() 的返回值为 1，否则返回值为 0。"},{name:"IF",params:[{name:"expr1"},{name:"expr2"},{name:"expr3"}],desc:"如果 expr1 的值为 TRUE（即：expr1<>0 且 expr1<>NULL），返回结果为 expr2；否则返回结果为 expr3。"},{name:"IFNULL",params:[{name:"expr1"},{name:"expr2"}],desc:"假设 expr1 不为 NULL，则 IFNULL() 的返回值为 expr1；否则其返回值为 expr2。"},{name:"NULLIF",params:[{name:"expr1"},{name:"expr2"}],desc:"如果 expr1 = expr2 成立，那么返回值为 NULL，否则返回值为 expr1。"}].concat([{name:"AVG",params:[{name:"expr"}],desc:"返回数值列的平均值。"},{name:"COUNT",params:[{name:"expr"}],desc:"该函数返回 SELECT 语句检索到的行中非 NULL 值的数目。"},{name:"SUM",params:[{name:"expr"}],desc:"返回参数中指定列的和。"},{name:"GROUP_CONCAT",params:[{name:"expr"}],desc:"返回带有来自一个组的连接的非 NULL 值的字符串结果。"},{name:"MAX",params:[{name:"expr"}],desc:"返回参数中指定的列中的最大值。"},{name:"MIN",params:[{name:"expr"}],desc:"返回参数中指定列的最小值。"}]).concat([]).concat([{name:"FOUND_ROWS",params:[],desc:"一个 SELECT 语句可能包含一个 LIMIT 子句，用来限制数据库服务器端返回客户端的行数。在某些情况下，我们需要不再次运行该语句而得知在没有 LIMIT 时到底该语句返回了多少行。我们可以在 SELECT 语句中选择使用 SQL_CALC_FOUND_ROWS，然后调用 FOUND_ROWS() 函数，获取该语句在没有 LIMIT 时返回的行数。"},{name:"LAST_INSERT_ID",params:[],desc:"返回本 SESSION 最后一次插入的自增字段值，如最近一条 INSERT 插入多条记录，LAST_INSERT_ID() 返回第一条记录的自增字段值。"}]).concat([{name:"COALESCE",params:[{name:"expr"}],desc:"依次参考各参数表达式，遇到非 NULL 值即停止并返回该值。"},{name:"NVL",params:[{name:"str1"},{name:"replace_with"}],desc:"如果 str1 为 NULL，则替换成 replace_with。"},{name:"MATCH",body:"MATCH (${1:cols}) AGAINST (${2:expr})",desc:"全文查找函数"}]);var s=n(54375),S=n(54768);let i=new S.q(window.obMonaco.getWorkerUrl("mysql")),R=s.Ud(i.getWorker());var I=function(e,E,n,t){return new(n||(n=Promise))(function(a,r){function T(e){try{S(t.next(e))}catch(e){r(e)}}function s(e){try{S(t.throw(e))}catch(e){r(e)}}function S(e){var E;e.done?a(e.value):((E=e.value)instanceof n?E:new n(function(e){e(E)})).then(T,s)}S((t=t.apply(e,E||[])).next())})},o=class{constructor(e){this.triggerCharacters=["."],this.plugin=null,this.plugin=e}getModelOptions(e){var E;return null===(E=this.plugin)||void 0===E?void 0:E.modelOptionsMap.get(e)}provideCompletionItems(e,E,n,t){var a,r;let T=n.triggerCharacter,s=(null===(r=null===(a=this.plugin)||void 0===a?void 0:a.modelOptionsMap.get(e.id))||void 0===r?void 0:r.delimiter)||";",S=e.getWordUntilPosition(E),i={startLineNumber:E.lineNumber,endLineNumber:E.lineNumber,startColumn:S.startColumn,endColumn:S.endColumn},R=e.getOffsetAt(E);return this.getCompleteWordFromOffset(R,e.getValue(),s,i,e,T)}getColumnList(e,E,n){var t;return I(this,void 0,void 0,function*(){let a=this.getModelOptions(e.id),T=[],s=yield null===(t=null==a?void 0:a.getTableColumns)||void 0===t?void 0:t.call(a,E.tableName,E.schemaName);return s&&s.forEach(e=>{T.push((0,r.yD)(e.columnName,E.tableName,E.schemaName,n))}),T})}getSchemaList(e,E){var n;return I(this,void 0,void 0,function*(){let t=this.getModelOptions(e.id),a=[],T=yield null===(n=null==t?void 0:t.getSchemaList)||void 0===n?void 0:n.call(t);return T&&T.forEach(e=>{a.push((0,r.lW)(e,E))}),a})}getTableList(e,E,n){var t;return I(this,void 0,void 0,function*(){let a=this.getModelOptions(e.id),T=[],s=yield null===(t=null==a?void 0:a.getTableList)||void 0===t?void 0:t.call(a,E);return s&&s.forEach(e=>{T.push((0,r.Pf)(e,E,!1,n))}),T})}getFunctions(e,E){var n;return I(this,void 0,void 0,function*(){let t=this.getModelOptions(e.id),a=yield null===(n=null==t?void 0:t.getFunctions)||void 0===n?void 0:n.call(t);return(a||[]).concat(T).map(e=>(0,r.Ht)(e,E))})}getSnippets(e,E){var n;return I(this,void 0,void 0,function*(){let t=this.getModelOptions(e.id),a=yield null===(n=null==t?void 0:t.getSnippets)||void 0===n?void 0:n.call(t);return(a||[]).map(e=>(0,r.k8)(e,E))})}getCompleteWordFromOffset(e,E,n,t,a,T){var s;return I(this,void 0,void 0,function*(){let T=R.parser,S=yield T.getAutoCompletion(E,n,e);if(S){let e=this.getModelOptions(a.id),E=[];for(let n of S)if("string"==typeof n)E.push((0,r.Lx)(n,t));else if("allTables"===n.type)E=E.concat((yield this.getTableList(a,n.schema,t)));else if("tableColumns"===n.type)E=E.concat((yield this.getColumnList(a,n,t)));else if("withTable"===n.type)E.push((0,r.Pf)(n.tableName,"CTE",!1,t));else if("allSchemas"===n.type)E=E.concat((yield this.getSchemaList(a,t)));else if("objectAccess"===n.type){let r=n.objectName,T=yield null===(s=null==e?void 0:e.getSchemaList)||void 0===s?void 0:s.call(e),S=null==T?void 0:T.find(e=>e===r);if(S){E=E.concat((yield this.getTableList(a,n.objectName,t)));continue}let i=r.split("."),R=i.length>1?i[1]:i[0],I=i.length>1?i[0]:void 0,o=yield this.getColumnList(a,{tableName:R,schemaName:I},t);(null==o?void 0:o.length)&&(E=E.concat(o))}else"fromTable"===n.type?E.push((0,r.Pf)(n.tableName,n.schemaName,!0,t)):"allFunction"===n.type&&(E=E.concat((yield this.getFunctions(a,t))));return{suggestions:E=E.concat((yield this.getSnippets(a,t))),incomplete:!1}}return{suggestions:[],incomplete:!1}})}};let A=["ACCOUNT","ACTION","ACTIVE","ADMIN","AFTER","AGAINST","AGGREGATE","ALGORITHM","ALWAYS","ANY","ARRAY","ASCII","ASSIGN_GTIDS_TO_ANONYMOUS_TRANSACTIONS","AT","ATTRIBUTE","AUTHENTICATION","AUTOEXTEND_SIZE","AUTO_INCREMENT","AVG","AVG_ROW_LENGTH","BACKUP","BEGIN","BINLOG","BIT","BLOCK","BOOL","BOOLEAN","BTREE","BUCKETS","BYTE","CACHE","CASCADED","CATALOG_NAME","CHAIN","CHALLENGE_RESPONSE","CHANGED","CHANNEL","CHARSET","CHECKSUM","CIPHER","CLASS_ORIGIN","CLIENT","CLONE","CLOSE","COALESCE","CODE","COLLATION","COLUMNS","COLUMN_FORMAT","COLUMN_NAME","COMMENT","COMMIT","COMMITTED","COMPACT","COMPLETION","COMPONENT","COMPRESSED","COMPRESSION","CONCURRENT","CONNECTION","CONSISTENT","CONSTRAINT_CATALOG","CONSTRAINT_NAME","CONSTRAINT_SCHEMA","CONTAINS","CONTEXT","CPU","CURRENT","CURSOR_NAME","DATA","DATAFILE","DATE","DATETIME","DAY","DEALLOCATE","DEFAULT_AUTH","DEFINER","DEFINITION","DELAY_KEY_WRITE","DESCRIPTION","DIAGNOSTICS","DIRECTORY","DISABLE","DISCARD","DISK","DO","DUMPFILE","DUPLICATE","DYNAMIC","ENABLE","ENCRYPTION","END","ENDS","ENFORCED","ENGINE","ENGINES","ENGINE_ATTRIBUTE","ENUM","ERROR","ERRORS","ESCAPE","EVENT","EVENTS","EVERY","EXCHANGE","EXCLUDE","EXECUTE","EXPANSION","EXPIRE","EXPORT","EXTENDED","EXTENT_SIZE","FACTOR","FAILED_LOGIN_ATTEMPTS","FAST","FAULTS","FIELDS","FILE","FILE_BLOCK_SIZE","FILTER","FINISH","FIRST","FIXED","FLUSH","FOLLOWING","FOLLOWS","FORMAT","FOUND","FULL","GENERAL","GEOMCOLLECTION","GEOMETRY","GEOMETRYCOLLECTION","GET_FORMAT","GET_MASTER_PUBLIC_KEY","GET_SOURCE_PUBLIC_KEY","GLOBAL","GRANTS","GROUP_REPLICATION","GTID_ONLY","HANDLER","HASH","HELP","HISTOGRAM","HISTORY","HOST","HOSTS","HOUR","IDENTIFIED","IGNORE_SERVER_IDS","IMPORT","INACTIVE","INDEXES","INITIAL","INITIAL_SIZE","INITIATE","INSERT_METHOD","INSTALL","INSTANCE","INVISIBLE","INVOKER","IO","IO_THREAD","IPC","ISOLATION","ISSUER","JSON","JSON_VALUE","KEYRING","KEY_BLOCK_SIZE","LANGUAGE","LAST","LEAVES","LESS","LEVEL","LINESTRING","LIST","LOCAL","LOCKED","LOCKS","LOGFILE","LOGS","MASTER","MASTER_AUTO_POSITION","MASTER_COMPRESSION_ALGORITHMS","MASTER_CONNECT_RETRY","MASTER_DELAY","MASTER_HEARTBEAT_PERIOD","MASTER_HOST","MASTER_LOG_FILE","MASTER_LOG_POS","MASTER_PASSWORD","MASTER_PORT","MASTER_PUBLIC_KEY_PATH","MASTER_RETRY_COUNT","MASTER_SSL","MASTER_SSL_CA","MASTER_SSL_CAPATH","MASTER_SSL_CERT","MASTER_SSL_CIPHER","MASTER_SSL_CRL","MASTER_SSL_CRLPATH","MASTER_SSL_KEY","MASTER_TLS_CIPHERSUITES","MASTER_TLS_VERSION","MASTER_USER","MASTER_ZSTD_COMPRESSION_LEVEL","MAX_CONNECTIONS_PER_HOUR","MAX_QUERIES_PER_HOUR","MAX_ROWS","MAX_SIZE","MAX_UPDATES_PER_HOUR","MAX_USER_CONNECTIONS","MEDIUM","MEMBER","MEMORY","MERGE","MESSAGE_TEXT","MICROSECOND","MIGRATE","MINUTE","MIN_ROWS","MODE","MODIFY","MONTH","MULTILINESTRING","MULTIPOINT","MULTIPOLYGON","MUTEX","MYSQL_ERRNO","NAME","NAMES","NATIONAL","NCHAR","NDB","NDBCLUSTER","NESTED","NETWORK_NAMESPACE","NEVER","NEW","NEXT","NO","NODEGROUP","NONE","NOWAIT","NO_WAIT","NULLS","NUMBER","NVARCHAR","OFF","OFFSET","OJ","OLD","ONE","ONLY","OPEN","OPTIONAL","OPTIONS","ORDINALITY","ORGANIZATION","OTHERS","OWNER","PACK_KEYS","PAGE","PARSER","PARTIAL","PARTITIONING","PARTITIONS","PASSWORD","PASSWORD_LOCK_TIME","PATH","PERSIST","PERSIST_ONLY","PHASE","PLUGIN","PLUGINS","PLUGIN_DIR","POINT","POLYGON","PORT","PRECEDES","PRECEDING","PREPARE","PRESERVE","PREV","PRIVILEGES","PRIVILEGE_CHECKS_USER","PROCESS","PROCESSLIST","PROFILE","PROFILES","PROXY","QUARTER","QUERY","QUICK","RANDOM","READ_ONLY","REBUILD","RECOVER","REDO_BUFFER_SIZE","REDUNDANT","REFERENCE","REGISTRATION","RELAY","RELAYLOG","RELAY_LOG_FILE","RELAY_LOG_POS","RELAY_THREAD","RELOAD","REMOVE","REORGANIZE","REPAIR","REPEATABLE","REPLICA","REPLICAS","REPLICATE_DO_DB","REPLICATE_DO_TABLE","REPLICATE_IGNORE_DB","REPLICATE_IGNORE_TABLE","REPLICATE_REWRITE_DB","REPLICATE_WILD_DO_TABLE","REPLICATE_WILD_IGNORE_TABLE","REPLICATION","REQUIRE_ROW_FORMAT","REQUIRE_TABLE_PRIMARY_KEY_CHECK","RESET","RESOURCE","RESPECT","RESTART","RESTORE","RESUME","RETAIN","RETURNED_SQLSTATE","RETURNING","RETURNS","REUSE","REVERSE","ROLE","ROLLBACK","ROLLUP","ROTATE","ROUTINE","ROW_COUNT","ROW_FORMAT","RTREE","SAVEPOINT","SCHEDULE","SCHEMA_NAME","SECOND","SECONDARY","SECONDARY_ENGINE","SECONDARY_ENGINE_ATTRIBUTE","SECONDARY_LOAD","SECONDARY_UNLOAD","SECURITY","SERIAL","SERIALIZABLE","SERVER","SESSION","SHARE","SHUTDOWN","SIGNED","SIMPLE","SKIP","SLAVE","SLOW","SNAPSHOT","SOCKET","SOME","SONAME","SOUNDS","SOURCE","SOURCE_AUTO_POSITION","SOURCE_BIND","SOURCE_COMPRESSION_ALGORITHMS","SOURCE_CONNECTION_AUTO_FAILOVER","SOURCE_CONNECT_RETRY","SOURCE_DELAY","SOURCE_HEARTBEAT_PERIOD","SOURCE_HOST","SOURCE_LOG_FILE","SOURCE_LOG_POS","SOURCE_PASSWORD","SOURCE_PORT","SOURCE_PUBLIC_KEY_PATH","SOURCE_RETRY_COUNT","SOURCE_SSL","SOURCE_SSL_CA","SOURCE_SSL_CAPATH","SOURCE_SSL_CERT","SOURCE_SSL_CIPHER","SOURCE_SSL_CRL","SOURCE_SSL_CRLPATH","SOURCE_SSL_KEY","SOURCE_SSL_VERIFY_SERVER_CERT","SOURCE_TLS_CIPHERSUITES","SOURCE_TLS_VERSION","SOURCE_USER","SOURCE_ZSTD_COMPRESSION_LEVEL","SQL_AFTER_GTIDS","SQL_AFTER_MTS_GAPS","SQL_BEFORE_GTIDS","SQL_BUFFER_RESULT","SQL_NO_CACHE","SQL_THREAD","SQL_TSI_DAY","SQL_TSI_HOUR","SQL_TSI_MINUTE","SQL_TSI_MONTH","SQL_TSI_QUARTER","SQL_TSI_SECOND","SQL_TSI_WEEK","SQL_TSI_YEAR","SRID","STACKED","START","STARTS","STATS_AUTO_RECALC","STATS_PERSISTENT","STATS_SAMPLE_PAGES","STATUS","STOP","STORAGE","STREAM","STRING","SUBCLASS_ORIGIN","SUBJECT","SUBPARTITION","SUBPARTITIONS","SUPER","SUSPEND","SWAPS","SWITCHES","TABLES","TABLESPACE","TABLE_CHECKSUM","TABLE_NAME","TEMPORARY","TEMPTABLE","TEXT","THAN","THREAD_PRIORITY","TIES","TIME","TIMESTAMP","TIMESTAMPADD","TIMESTAMPDIFF","TLS","TRANSACTION","TRIGGERS","TRUNCATE","TYPE","TYPES","UNBOUNDED","UNCOMMITTED","UNDEFINED","UNDOFILE","UNDO_BUFFER_SIZE","UNICODE","UNINSTALL","UNKNOWN","UNREGISTER","UNTIL","UPGRADE","USER","USER_RESOURCES","USE_FRM","VALIDATION","VALUE","VARIABLES","VCPU","VIEW","VISIBLE","WAIT","WARNINGS","WEEK","WEIGHT_STRING","WITHOUT","WORK","WRAPPER","X509","XA","XID","XML","YEAR","ZONE"].concat(["ACCESSIBLE","ADD","ALL","ALTER","ANALYZE","AND","AS","ASC","ASENSITIVE","BEFORE","BETWEEN","BIGINT","BINARY","BLOB","BOTH","BY","CALL","CASCADE","CASE","CHANGE","CHAR","CHARACTER","CHECK","COLLATE","COLUMN","CONDITION","CONSTRAINT","CONTINUE","CONVERT","CREATE","CROSS","CUBE","CUME_DIST","CURRENT_DATE","CURRENT_TIME","CURRENT_TIMESTAMP","CURRENT_USER","CURSOR","DATABASE","DATABASES","DAY_HOUR","DAY_MICROSECOND","DAY_MINUTE","DAY_SECOND","DEC","DECIMAL","DECLARE","DEFAULT","DELAYED","DELETE","DENSE_RANK","DESC","DESCRIBE","DETERMINISTIC","DISTINCT","DISTINCTROW","DIV","DOUBLE","DROP","DUAL","EACH","ELSE","ELSEIF","EMPTY","ENCLOSED","ESCAPED","EXCEPT","EXISTS","EXIT","EXPLAIN","FALSE","FETCH","FIRST_VALUE","FLOAT","FLOAT4","FLOAT8","FOR","FORCE","FOREIGN","FROM","FULLTEXT","FUNCTION","GENERATED","GET","GRANT","GROUP","GROUPING","GROUPS","HAVING","HIGH_PRIORITY","HOUR_MICROSECOND","HOUR_MINUTE","HOUR_SECOND","IF","IGNORE","IN","INDEX","INFILE","INNER","INOUT","INSENSITIVE","INSERT","INT","INT1","INT2","INT3","INT4","INT8","INTEGER","INTERVAL","INTO","IO_AFTER_GTIDS","IO_BEFORE_GTIDS","IS","ITERATE","JOIN","JSON_TABLE","KEY","KEYS","KILL","LAG","LAST_VALUE","LATERAL","LEAD","LEADING","LEAVE","LEFT","LIKE","LIMIT","LINEAR","LINES","LOAD","LOCALTIME","LOCALTIMESTAMP","LOCK","LONG","LONGBLOB","LONGTEXT","LOOP","LOW_PRIORITY","MASTER_BIND","MASTER_SSL_VERIFY_SERVER_CERT","MATCH","MAXVALUE","MEDIUMBLOB","MEDIUMINT","MEDIUMTEXT","MIDDLEINT","MINUTE_MICROSECOND","MINUTE_SECOND","MOD","MODIFIES","NATURAL","NOT","NO_WRITE_TO_BINLOG","NTH_VALUE","NTILE","NULL","NUMERIC","OF","ON","OPTIMIZE","OPTIMIZER_COSTS","OPTION","OPTIONALLY","OR","ORDER","OUT","OUTER","OUTFILE","OVER","PARTITION","PERCENT_RANK","PRECISION","PRIMARY","PROCEDURE","PURGE","RANGE","RANK","READ","READS","READ_WRITE","REAL","RECURSIVE","REFERENCES","REGEXP","RELEASE","RENAME","REPEAT","REPLACE","REQUIRE","RESIGNAL","RESTRICT","RETURN","REVOKE","RIGHT","RLIKE","ROW","ROWS","ROW_NUMBER","SCHEMA","SCHEMAS","SECOND_MICROSECOND","SELECT","SENSITIVE","SEPARATOR","SET","SHOW","SIGNAL","SMALLINT","SPATIAL","SPECIFIC","SQL","SQLEXCEPTION","SQLSTATE","SQLWARNING","SQL_BIG_RESULT","SQL_CALC_FOUND_ROWS","SQL_SMALL_RESULT","SSL","STARTING","STORED","STRAIGHT_JOIN","SYSTEM","TABLE","TERMINATED","THEN","TINYBLOB","TINYINT","TINYTEXT","TO","TRAILING","TRIGGER","TRUE","UNDO","UNION","UNIQUE","UNLOCK","UNSIGNED","UPDATE","USAGE","USE","USING","UTC_DATE","UTC_TIME","UTC_TIMESTAMP","VALUES","VARBINARY","VARCHAR","VARCHARACTER","VARYING","VIRTUAL","WHEN","WHERE","WHILE","WINDOW","WITH","WRITE","XOR","YEAR_MONTH","ZEROFILL"]),m={comments:{lineComment:"--",blockComment:["/*","*/"]},brackets:[["{","}"],["[","]"],["(",")"]],wordPattern:/[\w#$]+/i,autoClosingPairs:[{open:"{",close:"}"},{open:"[",close:"]"},{open:"(",close:")"},{open:'"',close:'"'},{open:"'",close:"'"},{open:"`",close:"`"}],surroundingPairs:[{open:"{",close:"}"},{open:"[",close:"]"},{open:"(",close:")"},{open:'"',close:'"'},{open:"'",close:"'"},{open:"`",close:"`"}]},N={defaultToken:"",tokenPostfix:".sql",ignoreCase:!0,brackets:[{open:"[",close:"]",token:"delimiter.square"},{open:"(",close:")",token:"delimiter.parenthesis"}],keywords:Array.from(new Set(A)),operators:[":="],builtinVariables:[],builtinFunctions:T.map(e=>e.name),pseudoColumns:["$ACTION","$IDENTITY","$ROWGUID","$PARTITION"],escapes:/\\(?:[abfnrtv\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,tokenizer:{root:[{include:"@comments"},{include:"@whitespace"},{include:"@pseudoColumns"},{include:"@numbers"},{include:"@strings"},{include:"@backTick"},{include:"@complexIdentifiers"},{include:"@scopes"},[/[;,.]/,"delimiter"],[/[()]/,"@brackets"],[/[\w@#$]+/,{cases:{"@keywords":"keyword","@operators":"operator","@builtinVariables":"string","@builtinFunctions":"type.identifier","@default":"identifier"}}],[/[<>=!%&+\-*/|~^]/,"operator"]],whitespace:[[/\s+/,"white"]],comments:[[/--+.*/,"comment"],[/#+.*/,"comment"],[/\/\*/,{token:"comment.quote",next:"@comment"}]],comment:[[/[^*/]+/,"comment"],[/\*\//,{token:"comment.quote",next:"@pop"}],[/./,"comment"]],pseudoColumns:[[/[$][A-Za-z_][\w@#$]*/,{cases:{"@pseudoColumns":"predefined","@default":"identifier"}}]],numbers:[[/0[xX][0-9a-fA-F]*/,"number"],[/[$][+-]*\d*(\.\d*)?/,"number"],[/((\d+(\.\d*)?)|(\.\d+))([eE][\-+]?\d+)?/,"number"]],strings:[[/N'/,{token:"string",next:"@string"}],[/'/,{token:"string",next:"@string"}]],string:[[/[^\\']+/,"string"],[/@escapes/,"string.escape"],[/\\./,"string.escape.invalid"],[/''/,"string"],[/'/,{token:"string",next:"@pop"}]],backTick:[[/`/,{token:"identifier.quote",next:"@backTickIdentifiers"}]],backTickIdentifiers:[[/[^`]+/,"string.escape"],[/`/,{token:"identifier.quote",next:"@pop"}]],complexIdentifiers:[[/\[/,{token:"identifier.quote",next:"@bracketedIdentifier"}],[/"/,{token:"identifier.quote",next:"@quotedIdentifier"}]],bracketedIdentifier:[[/[^\]]+/,"identifier"],[/]]/,"identifier"],[/]/,{token:"identifier.quote",next:"@pop"}]],quotedIdentifier:[[/[^"]+/,"identifier"],[/""/,"identifier"],[/"/,{token:"identifier.quote",next:"@pop"}]],scopes:[[/BEGIN\s+(DISTRIBUTED\s+)?TRAN(SACTION)?\b/i,"keyword"],[/BEGIN\s+TRY\b/i,{token:"keyword.try"}],[/END\s+TRY\b/i,{token:"keyword.try"}],[/BEGIN\s+CATCH\b/i,{token:"keyword.catch"}],[/END\s+CATCH\b/i,{token:"keyword.catch"}],[/(BEGIN|CASE)\b/i,{token:"keyword.block"}],[/END\b/i,{token:"keyword.block"}],[/WHEN\b/i,{token:"keyword.choice"}],[/THEN\b/i,{token:"keyword.choice"}]]}};var O=n(5601);function L(e){t.Mj.register({id:a.$.MySQL}),t.Mj.setMonarchTokensProvider(a.$.MySQL,N),t.Mj.setLanguageConfiguration(a.$.MySQL,m),t.Mj.registerCompletionItemProvider(a.$.MySQL,new o(e)),t.Mj.registerDocumentFormattingEditProvider(a.$.MySQL,new O.m(e,a.$.MySQL)),t.Mj.registerDocumentRangeFormattingEditProvider(a.$.MySQL,new O.X(e,a.$.MySQL))}},81065:function(e,E,n){var t,a;n.d(E,{$:function(){return t}}),(a=t||(t={})).OB_MySQL="obmysql",a.OB_Oracle="oboracle",a.MySQL="mysql"},54375:function(e,E,n){n.d(E,{Ud:function(){return I}});/**
 * @license
 * Copyright 2019 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */let t=Symbol("Comlink.proxy"),a=Symbol("Comlink.endpoint"),r=Symbol("Comlink.releaseProxy"),T=Symbol("Comlink.finalizer"),s=Symbol("Comlink.thrown"),S=e=>"object"==typeof e&&null!==e||"function"==typeof e,i=new Map([["proxy",{canHandle:e=>S(e)&&e[t],serialize(e){let{port1:E,port2:n}=new MessageChannel;return function e(E,n=globalThis,a=["*"]){n.addEventListener("message",function r(S){let i;if(!S||!S.data)return;if(!function(e,E){for(let n of e)if(E===n||"*"===n||n instanceof RegExp&&n.test(E))return!0;return!1}(a,S.origin)){console.warn(`Invalid origin '${S.origin}' for comlink proxy`);return}let{id:I,type:o,path:A}=Object.assign({path:[]},S.data),m=(S.data.argumentList||[]).map(c);try{var N;let n=A.slice(0,-1).reduce((e,E)=>e[E],E),a=A.reduce((e,E)=>e[E],E);switch(o){case"GET":i=a;break;case"SET":n[A.slice(-1)[0]]=c(S.data.value),i=!0;break;case"APPLY":i=a.apply(n,m);break;case"CONSTRUCT":{let e=new a(...m);i=Object.assign(e,{[t]:!0})}break;case"ENDPOINT":{let{port1:n,port2:t}=new MessageChannel;e(E,t),N=[n],L.set(n,N),i=n}break;case"RELEASE":i=void 0;break;default:return}}catch(e){i={value:e,[s]:0}}Promise.resolve(i).catch(e=>({value:e,[s]:0})).then(e=>{let[t,a]=l(e);n.postMessage(Object.assign(Object.assign({},t),{id:I}),a),"RELEASE"===o&&(n.removeEventListener("message",r),R(n),T in E&&"function"==typeof E[T]&&E[T]())}).catch(e=>{let[E,t]=l({value:TypeError("Unserializable return value"),[s]:0});n.postMessage(Object.assign(Object.assign({},E),{id:I}),t)})}),n.start&&n.start()}(e,E),[n,[n]]},deserialize:e=>(e.start(),I(e))}],["throw",{canHandle:e=>S(e)&&s in e,serialize:({value:e})=>[e instanceof Error?{isError:!0,value:{message:e.message,name:e.name,stack:e.stack}}:{isError:!1,value:e},[]],deserialize(e){if(e.isError)throw Object.assign(Error(e.value.message),e.value);throw e.value}}]]);function R(e){"MessagePort"===e.constructor.name&&e.close()}function I(e,E){return function e(E,n=[],t=function(){}){let T=!1,s=new Proxy(t,{get(t,a){if(o(T),a===r)return()=>{N&&N.unregister(s),A(E),T=!0};if("then"===a){if(0===n.length)return{then:()=>s};let e=C(E,{type:"GET",path:n.map(e=>e.toString())}).then(c);return e.then.bind(e)}return e(E,[...n,a])},set(e,t,a){o(T);let[r,s]=l(a);return C(E,{type:"SET",path:[...n,t].map(e=>e.toString()),value:r},s).then(c)},apply(t,r,s){o(T);let S=n[n.length-1];if(S===a)return C(E,{type:"ENDPOINT"}).then(c);if("bind"===S)return e(E,n.slice(0,-1));let[i,R]=O(s);return C(E,{type:"APPLY",path:n.map(e=>e.toString()),argumentList:i},R).then(c)},construct(e,t){o(T);let[a,r]=O(t);return C(E,{type:"CONSTRUCT",path:n.map(e=>e.toString()),argumentList:a},r).then(c)}});return!function(e,E){let n=(m.get(E)||0)+1;m.set(E,n),N&&N.register(e,E,e)}(s,E),s}(e,[],E)}function o(e){if(e)throw Error("Proxy has been released and is not useable")}function A(e){return C(e,{type:"RELEASE"}).then(()=>{R(e)})}let m=new WeakMap,N="FinalizationRegistry"in globalThis&&new FinalizationRegistry(e=>{let E=(m.get(e)||0)-1;m.set(e,E),0===E&&A(e)});function O(e){var E;let n=e.map(l);return[n.map(e=>e[0]),(E=n.map(e=>e[1]),Array.prototype.concat.apply([],E))]}let L=new WeakMap;function l(e){for(let[E,n]of i)if(n.canHandle(e)){let[t,a]=n.serialize(e);return[{type:"HANDLER",name:E,value:t},a]}return[{type:"RAW",value:e},L.get(e)||[]]}function c(e){switch(e.type){case"HANDLER":return i.get(e.name).deserialize(e.value);case"RAW":return e.value}}function C(e,E,n){return new Promise(t=>{let a=[,,,,].fill(0).map(()=>Math.floor(Math.random()*Number.MAX_SAFE_INTEGER).toString(16)).join("-");e.addEventListener("message",function E(n){n.data&&n.data.id&&n.data.id===a&&(e.removeEventListener("message",E),t(n.data))}),e.start&&e.start(),e.postMessage(Object.assign({id:a},E),n)})}}}]);