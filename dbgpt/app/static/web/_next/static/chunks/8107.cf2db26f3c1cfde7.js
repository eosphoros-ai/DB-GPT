"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[8107],{68107:function(E,T,e){e.r(T),e.d(T,{setup:function(){return M}});var I=e(40042),A=e(12875),R=e(66221);let S=[{name:"CURDATE",params:[],desc:"返回当前日期，不含时间部分。"},{name:"CURRENT_DATE",params:[],desc:"返回当前日期，不含时间部分。"},{name:"CURRENT_TIME",params:[{name:"scale"}],desc:"返回当前时间，不含日期部分。"},{name:"CURRENT_TIMESTAMP",params:[{name:"scale"}],desc:"返回当前日期时间，考虑时区设置。"},{name:"CURTIME",params:[],desc:"返回当前时间，不含日期部分。"},{name:"DATE_ADD",params:[{name:"date"},{name:"INTERVAL"}],desc:"日期时间的算术计算。"},{name:"DATE_FORMAT",params:[{name:"date"},{name:"format"}],desc:"将日期时间以指定格式输出。"},{name:"DATE_SUB",params:[{name:"date"},{name:"INTERVAL"}],desc:"日期时间的算术计算。"},{name:"DATEDIFF",params:[{name:"date1"},{name:"date2"}],desc:"返回 date1 和 date2 之间的天数。"},{name:"EXTRACT",body:"EXTRACT(${1:unit} FROM ${2:date})",desc:"以整数类型返回 date 的指定部分值。"},{name:"FROM_DAYS",params:[{name:"N"}],desc:"返回指定天数 N 对应的 DATE 值。"},{name:"FROM_UNIXTIME",params:[{name:"unix_timestamp"},{name:"format"}],desc:"返回指定格式的日期时间字符串。"},{name:"MONTH",params:[{name:"date"}],desc:"返回 date 的月份信息。"},{name:"NOW",params:[{name:"scale"}],desc:"返回当前日期时间，考虑时区设置。"},{name:"PERIOD_DIFF",params:[{name:"p1"},{name:"p2"}],desc:"以月份位单位返回两个日期之间的间隔。"},{name:"STR_TO_DATE",params:[{name:"str"},{name:"format"}],desc:"使用 format 将 str 转换为 DATETIME 值、DATE 值、或 TIME 值。"},{name:"TIME",params:[{name:"datetime"}],desc:"以 TIME 类型返回 datetime 的时间信息。"},{name:"TIME_TO_USEC",params:[{name:"date"}],desc:"将 date 值转换为距离 1970-01-01 00:00:00.000000 的微秒数，考虑时区信息。"},{name:"TIMEDIFF",params:[{name:"date1"},{name:"date2"}],desc:"以 TIME 类型返回两个日期时间的时间间隔。"},{name:"TIMESTAMPDIFF",params:[{name:"unit"},{name:"date1"},{name:"date2"}],desc:"以 unit 为单位返回两个日期时间的间隔。"},{name:"TIMESTAMPADD",params:[{name:"unit"},{name:"interval_expr"},{name:"date"}],desc:"日期时间的算术计算。"},{name:"TO_DAYS",params:[{name:"date"}],desc:"返回指定 date 值对应的天数。"},{name:"USEC_TO_TIME",params:[{name:"usec"}],desc:"将 usec 值转换为 TIMESTAMP 类型值。"},{name:"UNIX_TIMESTAMP",params:[{name:"date"}],desc:"返回指定时间距离 '1970-01-01 00:00:00' 的秒数，考虑时区。"},{name:"UTC_TIMESTAMP",params:[],desc:"返回当前 UTC 时间。"},{name:"YEAR",params:[{name:"date"}],desc:"返回 date 值的年份信息。"},{name:"CONCAT",params:[{name:"str"}],desc:"把多个字符串连接成一个字符串。"},{name:"CONCAT_WS",params:[{name:"separator"},{name:"str"}],desc:"把多个字符串连接成一个字符串，相邻字符串间使用 separator 分隔。"},{name:"FORMAT",params:[{name:"x"},{name:"d"}],desc:"把数字 X 格式化为“#,###,###.##”格式，四舍五入到 D 位小数，并以字符串形式返回结果（如果整数部分超过三位，会用“,”作为千分位分隔符）。"},{name:"SUBSTR",params:[{name:"str"},{name:"pos"}],desc:"返回 str 的子字符串，起始位置为 pos，长度为 len。"},{name:"SUBSTRING",params:[{name:"str"},{name:"pos"}],desc:"返回 str 的子字符串，起始位置为 pos，长度为 len。"},{name:"TRIM",params:[{name:"x"}],desc:"删除字符串所有前缀和/或后缀，默认为 BOTH。"},{name:"LTRIM",params:[{name:"str"}],desc:"删除字符串左侧的空格。"},{name:"RTRIM",params:[{name:"str"}],desc:"删除字符串右侧的空格。"},{name:"ASCII",params:[{name:"str"}],desc:"返回字符串最左侧字符的 ASCII 码。"},{name:"ORD",params:[{name:"str"}],desc:"返回字符串最左侧字符的字符码。"},{name:"LENGTH",params:[{name:"str"}],desc:"返回 str 的字节长度。"},{name:"CHAR_LENGTH",params:[{name:"str"}],desc:"返回字符串包含的字符数。"},{name:"UPPER",params:[{name:"str"}],desc:"将字符串中的小写字母转化为大写字母。"},{name:"LOWER",params:[{name:"str"}],desc:"将字符串中的大写字母转化为小写字母。"},{name:"HEX",params:[{name:"str"}],desc:"将数字或字符串转化为十六进制字符串。"},{name:"UNHEX",params:[{name:"str"}],desc:"将十六进制字符串转化为正常字符串。"},{name:"MD5",params:[{name:"str"}],desc:"返回字符串的 MD5 值。"},{name:"INT2IP",params:[{name:"int_value"}],desc:"将整数内码转换成 IP 地址。"},{name:"IP2INT",params:[{name:"ip_addr"}],desc:"将 IP 地址转换成整数内码。"},{name:"LIKE",body:"LIKE ${1:str}",desc:"字符串通配符匹配。"},{name:"REGEXP",body:"REGEXP ${1:str}",desc:"正则匹配。"},{name:"REPEAT",params:[{name:"str"},{name:"count"}],desc:"返回 str 重复 count 次组成的字符串。"},{name:"SPACE",params:[{name:"N"}],desc:"返回包含 N 个空格的字符串。"},{name:"SUBSTRING_INDEX",params:[{name:"str"},{name:"delim"},{name:"count"}],desc:"在定界符 delim 以及 count 出现前，从字符串 str 返回字符串。"},{name:"LOCATE",params:[{name:"substr"},{name:"str"}],desc:"第一个语法返回字符串 str 中子字符串 substr 的第一个出现位置。"},{name:"POSITION",params:[{name:"substr"},{name:"str"}],desc:"第一个语法返回字符串 str 中子字符串 substr 的第一个出现位置。"},{name:"INSTR",params:[{name:"str"},{name:"substr"}],desc:"返回字符串 str 中子字符串的第一个出现位置。"},{name:"REPLACE",params:[{name:"str"},{name:"from_str"},{name:"to_str"}],desc:"返回字符串 str 以及所有被字符 to_str 替代的字符串 from_str。"},{name:"FIELD",params:[{name:"str"}],desc:"返回参数 str 在 str1, str2, str3,… 列表中的索引位置（从 1 开始的位置）。"},{name:"ELT",params:[{name:"N"},{name:"str"}],desc:"若 N=1，则返回值为 str1；若 N=2，则返回值为 str2；以此类推。"},{name:"INSERT",params:[{name:"str1"},{name:"pos"},{name:"len"},{name:"str2"}],desc:"返回字符串 str1，字符串中起始于 pos 位置，长度为 len 的子字符串将被 str2 取代。"},{name:"LPAD",params:[{name:"str"},{name:"len"},{name:"padstr"}],desc:"用指定字符串 padstr，在左侧填充字符串 str 到指定长度 len。"},{name:"RPAD",params:[{name:"str"},{name:"len"},{name:"padstr"}],desc:"用指定字符串 padstr，在右侧填充字符串 str 到指定长度 len。"},{name:"UUID",params:[],desc:"生成一个全局唯一 ID。"},{name:"BIN",params:[{name:"N"}],desc:"返回数字 N 的二进制形式。"},{name:"QUOTE",params:[{name:"str"}],desc:"引用一个字符串以产生一个结果可以作为 SQL 语句中正确地转义数据值。"},{name:"REGEXP_SUBSTR",params:[{name:"str"},{name:"pattern"}],desc:"在 str 中搜索匹配正则表达式 pattern 的子串，子串不存在返回 NULL。"},{name:"CAST",body:"CAST(${1:expr} AS ${2:type})",desc:"将某种数据类型的表达式显式转换为另一种数据类型。"},{name:"ROUND",params:[{name:"X"}],desc:"返回一个数值，四舍五入到指定的长度或精度。"},{name:"CEIL",params:[{name:"expr"}],desc:"返回大于或者等于指定表达式的最小整数。"},{name:"FLOOR",params:[{name:"expr"}],desc:"返回小于或者等于指定表达式的最大整数。"},{name:"ABS",params:[{name:"expr"}],desc:"绝对值函数，求表达式绝对值，函数返回值类型与数值表达式的数据类型相同。"},{name:"NEG",params:[{name:"expr"}],desc:"求补函数，对操作数执行求补运算：用零减去操作数，然后结果返回操作数。"},{name:"SIGN",params:[{name:"X"}],desc:"SIGN(X) 返回参数作为 -1、 0 或 1 的符号，该符号取决于 X 的值为负、零或正。"},{name:"CONV",params:[{name:"N"},{name:"from_base"},{name:"to_base"}],desc:"不同数基间转换数字。"},{name:"MOD",params:[{name:"N"},{name:"M"}],desc:"取余函数。"},{name:"POW",params:[{name:"X"},{name:"Y"}],desc:"返回 X 的 Y 次方。"},{name:"POWER",params:[{name:"X"},{name:"Y"}],desc:"返回 X 的 Y 次方。"},{name:"RAND",params:[{name:"value1"}],desc:"RAND([N]) 函数接受 0 个或者 1 个参数（N 被称为随机数种子），返回一个范围是 [0,1.0) 的随机浮点数。"},{name:"GREATEST",params:[{name:"value1"}],desc:"返回参数的最大值，和函数 LEAST() 相对。"},{name:"LEAST",params:[{name:"value1"}],desc:"返回参数的最小值，和函数 GREATEST() 相对。"},{name:"ISNULL",params:[{name:"expr"}],desc:"如果参数 expr 为 NULL，那么 ISNULL() 的返回值为 1，否则返回值为 0。"},{name:"IF",params:[{name:"expr1"},{name:"expr2"},{name:"expr3"}],desc:"如果 expr1 的值为 TRUE（即：expr1<>0 且 expr1<>NULL），返回结果为 expr2；否则返回结果为 expr3。"},{name:"IFNULL",params:[{name:"expr1"},{name:"expr2"}],desc:"假设 expr1 不为 NULL，则 IFNULL() 的返回值为 expr1；否则其返回值为 expr2。"},{name:"NULLIF",params:[{name:"expr1"},{name:"expr2"}],desc:"如果 expr1 = expr2 成立，那么返回值为 NULL，否则返回值为 expr1。"}].concat([{name:"AVG",params:[{name:"expr"}],desc:"返回数值列的平均值。"},{name:"COUNT",params:[{name:"expr"}],desc:"该函数返回 SELECT 语句检索到的行中非 NULL 值的数目。"},{name:"SUM",params:[{name:"expr"}],desc:"返回参数中指定列的和。"},{name:"GROUP_CONCAT",params:[{name:"expr"}],desc:"返回带有来自一个组的连接的非 NULL 值的字符串结果。"},{name:"MAX",params:[{name:"expr"}],desc:"返回参数中指定的列中的最大值。"},{name:"MIN",params:[{name:"expr"}],desc:"返回参数中指定列的最小值。"}]).concat([]).concat([{name:"FOUND_ROWS",params:[],desc:"一个 SELECT 语句可能包含一个 LIMIT 子句，用来限制数据库服务器端返回客户端的行数。在某些情况下，我们需要不再次运行该语句而得知在没有 LIMIT 时到底该语句返回了多少行。我们可以在 SELECT 语句中选择使用 SQL_CALC_FOUND_ROWS，然后调用 FOUND_ROWS() 函数，获取该语句在没有 LIMIT 时返回的行数。"},{name:"LAST_INSERT_ID",params:[],desc:"返回本 SESSION 最后一次插入的自增字段值，如最近一条 INSERT 插入多条记录，LAST_INSERT_ID() 返回第一条记录的自增字段值。"}]).concat([{name:"COALESCE",params:[{name:"expr"}],desc:"依次参考各参数表达式，遇到非 NULL 值即停止并返回该值。"},{name:"NVL",params:[{name:"str1"},{name:"replace_with"}],desc:"如果 str1 为 NULL，则替换成 replace_with。"},{name:"MATCH",body:"MATCH (${1:cols}) AGAINST (${2:expr})",desc:"全文查找函数"}]);var N=e(19512),O=e(26110);let a=new O.q(window.obMonaco.getWorkerUrl("obmysql")),L=N.Ud(a.getWorker());var n=e(7965),s=function(E,T,e,I){return new(e||(e=Promise))(function(A,R){function S(E){try{O(I.next(E))}catch(E){R(E)}}function N(E){try{O(I.throw(E))}catch(E){R(E)}}function O(E){var T;E.done?A(E.value):((T=E.value)instanceof e?T:new e(function(E){E(T)})).then(S,N)}O((I=I.apply(E,T||[])).next())})},t=class{constructor(E){this.triggerCharacters=["."],this.plugin=null,this.plugin=E}getModelOptions(E){var T;return null===(T=this.plugin)||void 0===T?void 0:T.modelOptionsMap.get(E)}provideCompletionItems(E,T,e,I){let{offset:A,value:R,delimiter:S,range:N,triggerCharacter:O}=(0,n.y)(E,T,e,this.plugin);return this.getCompleteWordFromOffset(A,R,S,N,E,O)}getColumnList(E,T,e){var I;return s(this,void 0,void 0,function*(){let A=this.getModelOptions(E.id),S=[],N=yield null===(I=null==A?void 0:A.getTableColumns)||void 0===I?void 0:I.call(A,T.tableName,T.schemaName);return N&&N.forEach(E=>{S.push((0,R.yD)(E.columnName,T.tableName,T.schemaName,e))}),S})}getSchemaList(E,T){var e;return s(this,void 0,void 0,function*(){let I=this.getModelOptions(E.id),A=[],S=yield null===(e=null==I?void 0:I.getSchemaList)||void 0===e?void 0:e.call(I);return S&&S.forEach(E=>{A.push((0,R.lW)(E,T))}),A})}getTableList(E,T,e){var I;return s(this,void 0,void 0,function*(){let A=this.getModelOptions(E.id),S=[],N=yield null===(I=null==A?void 0:A.getTableList)||void 0===I?void 0:I.call(A,T);return N&&N.forEach(E=>{S.push((0,R.Pf)(E,T,!1,e))}),S})}getSnippets(E,T){var e;return s(this,void 0,void 0,function*(){let I=this.getModelOptions(E.id),A=yield null===(e=null==I?void 0:I.getSnippets)||void 0===e?void 0:e.call(I);return(A||[]).map(E=>(0,R.k8)(E,T))})}getFunctions(E,T){var e;return s(this,void 0,void 0,function*(){let I=this.getModelOptions(E.id),A=yield null===(e=null==I?void 0:I.getFunctions)||void 0===e?void 0:e.call(I);return(A||[]).concat(S).map(E=>(0,R.Ht)(E,T))})}getCompleteWordFromOffset(E,T,e,I,A,S){var N;return s(this,void 0,void 0,function*(){let S=L.parser,O=yield S.getAutoCompletion(T,e,E);if(O){let E=this.getModelOptions(A.id),T=[],e=!0;for(let S of O)if("string"!=typeof S&&(e=!1),"string"==typeof S)T.push((0,R.Lx)(S,I));else if("allTables"===S.type)T=T.concat((yield this.getTableList(A,S.schema,I)));else if("tableColumns"===S.type)T=T.concat((yield this.getColumnList(A,S,I)));else if("withTable"===S.type)T.push((0,R.Pf)(S.tableName,"CTE",!1,I));else if("allSchemas"===S.type)T=T.concat((yield this.getSchemaList(A,I)));else if("objectAccess"===S.type){let e=S.objectName,R=yield null===(N=null==E?void 0:E.getSchemaList)||void 0===N?void 0:N.call(E),O=null==R?void 0:R.find(E=>E===e);if(O){T=T.concat((yield this.getTableList(A,S.objectName,I)));continue}let a=e.split("."),L=a.length>1?a[1]:a[0],n=a.length>1?a[0]:void 0,s=yield this.getColumnList(A,{tableName:L,schemaName:n},I);(null==s?void 0:s.length)&&(T=T.concat(s))}else"fromTable"===S.type?T.push((0,R.Pf)(S.tableName,S.schemaName,!0,I)):"allFunction"===S.type&&(T=T.concat((yield this.getFunctions(A,I))));return e&&(T.push((0,R.Lx)("RETURN",I)),T=T.concat((yield this.getSnippets(A,I)))),{suggestions:T,incomplete:!1}}return{suggestions:[],incomplete:!1}})}};let C=["*","ACCESS","ACCOUNT","ACTION","ACTIVE","ADDDATE","AFTER","AGAINST","AGGREGATE","ALGORITHM","ALWAYS","ANALYSE","ANY","APPROX_COUNT_DISTINCT","APPROX_COUNT_DISTINCT_SYNOPSIS","APPROX_COUNT_DISTINCT_SYNOPSIS_MERGE","ARCHIVELOG","ARBITRATION","ASCII","AT","AUDIT","AUTHORS","AUTO","AUTOEXTEND_SIZE","AUTO_INCREMENT","AUTO_INCREMENT_MODE","AVG","AVG_ROW_LENGTH","BACKUP","BACKUPSET","BACKUP_COPIES","BADFILE","BASE","BASELINE","BASELINE_ID","BASIC","BALANCE","BANDWIDTH","BEGI","BINDING","BINLOG","BIT","BIT_AND","BIT_OR","BIT_XOR","BISON_LIST","BLOCK","BLOCK_SIZE","BLOCK_INDEX","BLOOM_FILTER","BOOL","BOOLEAN","BOOTSTRAP","BTREE","BYTE","BREADTH","BUCKETS","CACHE","CALIBRATION","CALIBRATION_INFO","KVCACHE","ILOGCACHE","CALC_PARTITION_ID","CANCEL","CASCADED","CAST","CATALOG_NAME","CHAIN","CHANGED","CHARSET","CHECKSUM","CHECKPOINT","CHUNK","CIPHER","CLASS_ORIGIN","CLEAN","CLEAR","CLIENT","CLOSE","CLOG","CLUSTER","CLUSTER_ID","CLUSTER_NAME","COALESCE","CODE","COLLATION","COLUMN_FORMAT","COLUMN_NAME","COLUMN_STAT","COLUMNS","COMMENT","COMMIT","COMMITTED","COMPACT","COMPLETION","COMPRESSED","COMPRESSION","COMPUTE","CONCURRENT","CONDENSED","CONNECTION","CONSISTENT","CONSISTENT_MODE","CONSTRAINT_CATALOG","CONSTRAINT_NAME","CONSTRAINT_SCHEMA","CONTAINS","CONTEXT","CONTRIBUTORS","COPY","COUNT","CPU","CREATE_TIMESTAMP","CTXCAT","CTX_ID","CUBE","CUME_DIST","CURDATE","CURRENT","CURSOR_NAME","CURTIME","CYCLE","DAG","DATA","DATABASE_ID","DATAFILE","DATA_TABLE_ID","DATE","DATE_ADD","DATE_SUB","DATETIME","DAY","DEALLOCATE","DECRYPTION","DEFAULT_AUTH","DEFINER","DELAY","DELAY_KEY_WRITE","DENSE_RANK","DEPTH","DES_KEY_FILE","DESCRIPTION","DESTINATION","DIAGNOSTICS","DIRECTORY","DISABLE","DISCARD","DISK","DISKGROUP","DISCONNECT","DO","DUMP","DUMPFILE","DUPLICATE","DUPLICATE_SCOPE","DYNAMIC","DEFAULT_TABLEGROUP","EFFECTIVE","EMPTY","ENABLE","ENABLE_ARBITRATION_SERVICE","ENABLE_EXTENDED_ROWID","ENCRYPTION","END","ENDS","ENFORCED","ENGINE_","ENGINES","ENUM","ENTITY","ERROR_CODE","ERROR_P","ERRORS","ESCAPE","ESTIMATE","EVENT","EVENTS","EVERY","EXCEPT","EXCHANGE","EXECUTE","EXPANSION","EXPIRE","EXPIRED","EXPIRE_INFO","EXPORT","EXTENDED","EXTENDED_NOADDR","EXTENT_SIZE","FAILOVER","EXTRACT","FAST","FAULTS","FLASHBACK","FIELDS","FILEX","FILE_ID","FINAL_COUNT","FIRST","FIRST_VALUE","FIXED","FLUSH","FOLLOWER","FOLLOWING","FORMAT","FROZEN","FOUND","FRAGMENTATION","FREEZE","FREQUENCY","FUNCTION","FULL","GENERAL","GEOMETRY","GEOMCOLLECTION","GEOMETRYCOLLECTION","GET_FORMAT","GLOBAL","GLOBAL_NAME","GRANTS","GROUPING","GROUP_CONCAT","GTS","HANDLER","HASH","HELP","HISTOGRAM","HOST","HOSTS","HOUR","HYBRID_HIST","ID","IDC","IDENTIFIED","IGNORE_SERVER_IDS","ILOG","IMPORT","INDEXES","INDEX_TABLE_ID","INCR","INFO","INITIAL_SIZE","INNODB","INSERT_METHOD","INSTALL","INSTANCE","INTERSECT","INVOKER","INCREMENT","INCREMENTAL","IO","IOPS_WEIGHT","IO_THREAD","IPC","ISNULL","ISOLATION","ISOLATE","ISSUER","JOB","JSON","JSON_VALUE","JSON_ARRAYAGG","JSON_OBJECTAGG","KEY_BLOCK_SIZE","KEY_VERSION","LAG","LANGUAGE","LAST","LAST_VALUE","LEAD","LEADER","LEAK","LEAK_MOD","LEAK_RATE","LEAVES","LESS","LEVEL","LINESTRING","LIST_","LISTAGG","LN","LOCAL","LOCALITY","LOCKED","LOCKS","LOG","LOGFILE","LOGONLY_REPLICA_NUM","LOGS","MAJOR","MANUAL","MASTER","MASTER_AUTO_POSITION","MASTER_CONNECT_RETRY","MASTER_DELAY","MASTER_HEARTBEAT_PERIOD","MASTER_HOST","MASTER_LOG_FILE","MASTER_LOG_POS","MASTER_PASSWORD","MASTER_PORT","MASTER_RETRY_COUNT","MASTER_SERVER_ID","MASTER_SSL","MASTER_SSL_CA","MASTER_SSL_CAPATH","MASTER_SSL_CERT","MASTER_SSL_CIPHER","MASTER_SSL_CRL","MASTER_SSL_CRLPATH","MASTER_SSL_KEY","MASTER_USER","MAX","MAX_CONNECTIONS_PER_HOUR","MAX_CPU","LOG_DISK_SIZE","MAX_IOPS","MEMORY_SIZE","MAX_QUERIES_PER_HOUR","MAX_ROWS","MAX_SIZE","MAX_UPDATES_PER_HOUR","MAX_USER_CONNECTIONS","MEDIUM","MEMBER","MEMORY","MEMTABLE","MERGE","MESSAGE_TEXT","MEMSTORE_PERCENT","META","MICROSECOND","MIGRATE","MIGRATION","MIN","MINVALUE","MIN_CPU","MIN_IOPS","MINOR","MIN_ROWS","MINUTE","MINUS","MODE","MODIFY","MONTH","MOVE","MULTILINESTRING","MULTIPOINT","MULTIPOLYGON","MUTEX","MYSQL_ERRNO","MAX_USED_PART_ID","NAME","NAMES","NATIONAL","NCHAR","NDB","NDBCLUSTER","NEW","NEXT","NO","NOARCHIVELOG","NOAUDIT","NOCACHE","NOCYCLE","NODEGROUP","NOMINVALUE","NOMAXVALUE","NONE","NOORDER","NOPARALLEL","NORMAL","NOW","NOWAIT","NO_WAIT","NTILE","NTH_VALUE","NUMBER","NULLS","NULLX","NVARCHAR","OCCUR","OF","OFF","OFFSET","OLD","OLD_PASSWORD","OLD_KEY","OJ","OVER","OBCONFIG_URL","ONE","ONE_SHOT","ONLY","OPEN","OPTIONS","ORIG_DEFAULT","REMOTE_OSS","OUTLINE","OWNER","PACK_KEYS","PAGE","PARALLEL","PARAMETERS","PARSER","PARTIAL","PASSWORD","PARTITION_ID","LS","PARTITIONING","PARTITIONS","PERCENT_RANK","PAUSE","PERCENTAGE","PHASE","PHYSICAL","PL","PLANREGRESS","PLUGIN","PLUGIN_DIR","PLUGINS","PLUS","POINT","POLICY","POLYGON","POOL","PORT","POSITION","PRECEDING","PREPARE","PRESERVE","PRETTY","PRETTY_COLOR","PREV","PRIMARY_ZONE","PRIVILEGES","PROCESS","PROCESSLIST","PROFILE","PROFILES","PROGRESSIVE_MERGE_NUM","PROXY","PS","PUBLIC","PCTFREE","P_ENTITY","P_CHUNK","QUARTER","QUERY","QUERY_RESPONSE_TIME","QUEUE_TIME","QUICK","RANK","READ_ONLY","REBUILD","RECOVER","RECOVERY","RECOVERY_WINDOW","RECURSIVE","RECYCLE","RECYCLEBIN","ROTATE","ROW_NUMBER","REDO_BUFFER_SIZE","REDOFILE","REDUNDANCY","REDUNDANT","REFRESH","REGION","REJECT","RELAY","RELAYLOG","RELAY_LOG_FILE","RELAY_LOG_POS","RELAY_THREAD","RELOAD","REMOVE","REORGANIZE","REPAIR","REPEATABLE","REPLICA","REPLICA_NUM","REPLICA_TYPE","REPLICATION","REPORT","RESET","RESOURCE","RESOURCE_POOL_LIST","RESPECT","RESTART","RESTORE","RESUME","RETURNED_SQLSTATE","RETURNING","RETURNS","REVERSE","ROLLBACK","ROLLING","ROLLUP","ROOT","ROOTSERVICE","ROOTSERVICE_LIST","ROOTTABLE","ROUTINE","ROW","ROW_COUNT","ROW_FORMAT","ROWS","RTREE","RUN","SAMPLE","SAVEPOINT","SCHEDULE","SCHEMA_NAME","SCN","SCOPE","SECOND","SECURITY","SEED","SEQUENCE","SEQUENCES","SERIAL","SERIALIZABLE","SERVER","SERVER_IP","SERVER_PORT","SERVER_TYPE","SERVICE","SESSION","SESSION_USER","SET_MASTER_CLUSTER","SET_SLAVE_CLUSTER","SET_TP","SHARE","SHUTDOWN","SIGNED","SIZE","SIMPLE","SLAVE","SLOW","SNAPSHOT","SOCKET","SOME","SONAME","SOUNDS","SOURCE","SPFILE","SPLIT","SQL_AFTER_GTIDS","SQL_AFTER_MTS_GAPS","SQL_BEFORE_GTIDS","SQL_BUFFER_RESULT","SQL_CACHE","SQL_ID","SQL_NO_CACHE","SQL_THREAD","SQL_TSI_DAY","SQL_TSI_HOUR","SQL_TSI_MINUTE","SQL_TSI_MONTH","SQL_TSI_QUARTER","SQL_TSI_SECOND","SQL_TSI_WEEK","SQL_TSI_YEAR","SRID","STACKED","STANDBY","START","STARTS","STAT","STATISTICS","STATS_AUTO_RECALC","STATS_PERSISTENT","STATS_SAMPLE_PAGES","STATUS","STATEMENTS","STD","STDDEV","STDDEV_POP","STDDEV_SAMP","STOP","STORAGE","STORAGE_FORMAT_VERSION","STORING","STRONG","STRING","SUBCLASS_ORIGIN","SUBDATE","SUBJECT","SUBPARTITION","SUBPARTITIONS","SUBSTR","SUBSTRING","SUCCESSFUL","SUM","SUPER","SUSPEND","SWAPS","SWITCH","SWITCHES","SWITCHOVER","SYSTEM","SYSTEM_USER","SYSDATE","TABLE_CHECKSUM","TABLE_MODE","TABLEGROUPS","TABLE_ID","TABLE_NAME","TABLES","TABLESPACE","TABLET","TABLET_ID","TABLET_SIZE","TABLET_MAX_SIZE","TASK","TEMPLATE","TEMPORARY","TEMPTABLE","TENANT","TENANT_ID","SLOT_IDX","TEXT","THAN","TIME","TIMESTAMP","TIMESTAMPADD","TIMESTAMPDIFF","TIME_ZONE_INFO","TP_NAME","TP_NO","TRACE","TRANSACTION","TRADITIONAL","TRIGGERS","TRIM","TRUNCATE","TYPE","TYPES","TABLEGROUP_ID","TOP_K_FRE_HIST","UNCOMMITTED","UNDEFINED","UNDO_BUFFER_SIZE","UNDOFILE","UNICODE","UNKNOWN","UNINSTALL","UNIT","UNIT_GROUP","UNIT_NUM","UNLOCKED","UNTIL","UNUSUAL","UPGRADE","USE_BLOOM_FILTER","USE_FRM","USER","USER_RESOURCES","UNBOUNDED","UNLIMITED","VALID","VALIDATE","VALUE","VARIANCE","VARIABLES","VAR_POP","VAR_SAMP","VERBOSE","VIRTUAL_COLUMN_ID","MATERIALIZED","VIEW","VERIFY","WAIT","WARNINGS","WASH","WEAK","WEEK","WEIGHT_STRING","WHENEVER","WINDOW","WORK","WRAPPER","X509","XA","XML","YEAR","ZONE","ZONE_LIST","ZONE_TYPE","LOCATION","PLAN","VISIBLE","INVISIBLE","ACTIVATE","SYNCHRONIZATION","THROTTLE","PRIORITY","RT","NETWORK","LOGICAL_READS","REDO_TRANSPORT_OPTIONS","MAXIMIZE","AVAILABILITY","PERFORMANCE","PROTECTION","OBSOLETE","HIDDEN","INDEXED","SKEWONLY","BACKUPPIECE","PREVIEW","BACKUP_BACKUP_DEST","BACKUPROUND","UP","TIMES","BACKED","NAMESPACE","LIB"].concat(["ACCESSIBLE","ADD","ALL","ALTER","ANALYZE","AND","AS","ASC","ASENSITIVE","BEFORE","BETWEEN","BIGINT","BINARY","BLOB","BOTH","BY","CALL","CASCADE","CASE","CHANGE","CHAR","CHARACTER","CHECK","COLLATE","COLUMN","CONDITION","CONSTRAINT","CONTINUE","CONVERT","CREATE","CROSS","CURRENT_DATE","CURRENT_TIME","CURRENT_TIMESTAMP","CURRENT_USER","CURSOR","DATABASE","DATABASES","DAY_HOUR","DAY_MICROSECOND","DAY_MINUTE","DAY_SECOND","DECIMAL","DECLARE","DEFAULT","DELAYED","DELETE","DESC","DESCRIBE","DETERMINISTIC","DISTINCT","DISTINCT","DIV","DOUBLE","DROP","DUAL","EACH","ELSE","ELSEIF","ENCLOSED","ESCAPED","EXISTS","EXIT","EXPLAIN","FETCH","FLOAT","FLOAT","DOUBLE","FOR","FORCE","FOREIGN","FROM","FULLTEXT","GENERATED","GET","GRANT","GROUP","HAVING","HIGH_PRIORITY","HOUR_MICROSECOND","HOUR_MINUTE","HOUR_SECOND","IF","IGNORE","IN","INDEX","INFILE","INNER","INOUT","INSENSITIVE","INTEGER","INTERVAL","TINYINT","SMALLINT","MEDIUMINT","BIGINT","INSERT","INTO","IO_AFTER_GTIDS","IO_BEFORE_GTIDS","IS","ITERATE","JOIN","KEY","KEYS","KILL","LEADING","LEAVE","LEFT","LIKE","LIMIT","LINEAR","LINES","LOAD","LOCALTIME","LOCALTIMESTAMP","LOCK_","MEDIUMTEXT","LONGBLOB","LONGTEXT","LOOP","LOW_PRIORITY","MASTER_BIND","MASTER_SSL_VERIFY_SERVER_CERT","MATCH","MAXVALUE","MEDIUMBLOB","MEDIUMINT","MEDIUMTEXT","MEDIUMINT","MIDDLEINT","NUMERIC","MINUTE_MICROSECOND","MINUTE_SECOND","MOD","MODIFIES","NATURAL","NOT","NO_WRITE_TO_BINLOG","NO_PARALLEL","NO_REWRITE","DECIMAL","ON","OPTIMIZE","OPTION","OPTIONALLY","OR","ORDER","OUT","OUTER","OUTFILE","PARTITION","PRECISION","PRIMARY","PROCEDURE","PURGE","RANGE","READ","READ_WRITE","READ_CONSISTENCY","READS","REAL","REFERENCES","REGEXP","RELEASE","RENAME","REPEAT","REPLACE","REQUIRE","RESIGNAL","RESTRICT","RETURN","REVOKE","RIGHT","RLIKE","REGEXP","SECOND_MICROSECOND","SENSITIVE","SET","SCHEMA","SCHEMAS","SELECT","SEPARATOR","SHOW","SIGNAL","SLOG","SMALLINT","SPATIAL","SPECIFIC","SQL","SQLEXCEPTION","SQLSTATE","SQLWARNING","SQL_BIG_RESULT","SQL_CALC_FOUND_ROWS","SQL_SMALL_RESULT","SSL","STARTING","STRAIGHT_JOIN","STORED","TABLE","TABLEGROUP","TERMINATED","THEN","TINYBLOB","TINYINT","TINYTEXT","TRAILING","TRIGGER","TO","UNDO","UNION","UNIQUE","UNLOCK","UNSIGNED","UPDATE","USAGE","USE","USING","UTC_DATE","UTC_TIME","UTC_TIMESTAMP","VARBINARY","VARCHAR","VARCHAR","VALUES","VARYING","VIRTUAL","WHERE","WHEN","WHILE","WITH","WRITE","XOR","YEAR_MONTH","ZEROFILL"]),_={comments:{lineComment:"-- ",blockComment:["/*","*/"]},brackets:[["{","}"],["[","]"],["(",")"]],wordPattern:/[\w#$]+/i,autoClosingPairs:[{open:"{",close:"}"},{open:"[",close:"]"},{open:"(",close:")"},{open:'"',close:'"'},{open:"'",close:"'"},{open:"`",close:"`"}],surroundingPairs:[{open:"{",close:"}"},{open:"[",close:"]"},{open:"(",close:")"},{open:'"',close:'"'},{open:"'",close:"'"},{open:"`",close:"`"}]},m={defaultToken:"",tokenPostfix:".sql",ignoreCase:!0,brackets:[{open:"[",close:"]",token:"delimiter.square"},{open:"(",close:")",token:"delimiter.parenthesis"}],keywords:Array.from(new Set(C.concat(["ALTER","BEGIN_KEY","BIGINT","BINARY","BINARY_INTEGER","BIT","BOOL","BOOLEAN","BY","CALL","CASE","CATALOG_NAME","CHARACTER","CHARSET","CLASS_ORIGIN","CLOSE","COLLATE","COLUMN_NAME","COMMENT","COMMIT","CONDITION","CONSTRAINT_CATALOG","CONSTRAINT_NAME","CONSTRAINT_ORIGIN","CONSTRAINT_SCHEMA","CONTAINS","CONTINUE","COUNT","CREATE","CURRENT_USER","CURSOR","CURSOR_NAME","DATA","DATE","DATETIME","DATE_VALUE","DD","DECIMAL_VAL","DECLARE","DEFAULT","DEFINER","DETERMINISTIC","DO","DOUBLE","DROP","ELSE","ELSEIF","END_KEY","END_P","ENUM","EXISTS","EXIT","EXTEND","FETCH","FLOAT","FOR","FOUND","FROM","FUNCTION","HANDLER","HEX_STRING_VALUE","IDENT","IF","IN","INOUT","INTEGER","INTNUM","INTO","INVOKER","IS","ITERATE","LANGUAGE","LEAVE","LIMIT","LONG","LOOP","MEDIUMINT","MESSAGE_TEXT","MODIFIES","MYSQL_ERRNO","NEXT","NO","NOT","NULLX","NUMBER","OF","OPEN","OUT","PRECISION","PROCEDURE","READS","RECORD","REPEAT","RESIGNAL","RETURN","RETURNS","ROLLBACK","SCHEMA_NAME","SECURITY","SELECT","SET","SIGNAL","SIGNED","SMALLINT","SQL","SQLEXCEPTION","SQLSTATE","SQLWARNING","SQL_KEYWORD","STRING","SUBCLASS_ORIGIN","SYSTEM_VARIABLE","TABLE","TABLE_NAME","TEXT","THEN","TIME","TIMESTAMP","TINYINT","TYPE","UNSIGNED","UNTIL","USER_VARIABLE","USING","VALUE","VARBINARY","VARCHAR","WHEN","WHILE","YEAR","ZEROFILL","INDEX","NUMERIC","PARSER_SYNTAX_ERROR","SQL_TOKEN"]))),operators:[":="],builtinVariables:[],builtinFunctions:S.map(E=>E.name),pseudoColumns:["$ACTION","$IDENTITY","$ROWGUID","$PARTITION"],escapes:/\\(?:[abfnrtv\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,tokenizer:{root:[{include:"@comments"},{include:"@whitespace"},{include:"@pseudoColumns"},{include:"@numbers"},{include:"@strings"},{include:"@backTick"},{include:"@complexIdentifiers"},{include:"@scopes"},[/[;,.]/,"delimiter"],[/[()]/,"@brackets"],[/[\w@#$]+/,{cases:{"@keywords":"keyword","@operators":"operator","@builtinVariables":"string","@builtinFunctions":"type.identifier","@default":"identifier"}}],[/[<>=!%&+\-*/|~^]/,"operator"]],whitespace:[[/\s+/,"white"]],comments:[[/--+\s.*/,"comment"],[/#+.*/,"comment"],[/\/\*/,{token:"comment.quote",next:"@comment"}]],comment:[[/[^*/]+/,"comment"],[/\*\//,{token:"comment.quote",next:"@pop"}],[/./,"comment"]],pseudoColumns:[[/[$][A-Za-z_][\w@#$]*/,{cases:{"@pseudoColumns":"predefined","@default":"identifier"}}]],numbers:[[/0[xX][0-9a-fA-F]*/,"number"],[/[$][+-]*\d*(\.\d*)?/,"number"],[/((\d+(\.\d*)?)|(\.\d+))([eE][\-+]?\d+)?/,"number"]],strings:[[/N'/,{token:"string",next:"@string"}],[/'/,{token:"string",next:"@string"}]],string:[[/[^\\']+/,"string"],[/@escapes/,"string.escape"],[/\\./,"string.escape.invalid"],[/''/,"string"],[/'/,{token:"string",next:"@pop"}]],backTick:[[/`/,{token:"identifier.quote",next:"@backTickIdentifiers"}]],backTickIdentifiers:[[/[^`]+/,"string.escape"],[/`/,{token:"identifier.quote",next:"@pop"}]],complexIdentifiers:[[/\[/,{token:"identifier.quote",next:"@bracketedIdentifier"}],[/"/,{token:"identifier.quote",next:"@quotedIdentifier"}]],bracketedIdentifier:[[/[^\]]+/,"identifier"],[/]]/,"identifier"],[/]/,{token:"identifier.quote",next:"@pop"}]],quotedIdentifier:[[/[^"]+/,"identifier"],[/""/,"identifier"],[/"/,{token:"identifier.quote",next:"@pop"}]],scopes:[[/BEGIN\s+(DISTRIBUTED\s+)?TRAN(SACTION)?\b/i,"keyword"],[/BEGIN\s+TRY\b/i,{token:"keyword.try"}],[/END\s+TRY\b/i,{token:"keyword.try"}],[/BEGIN\s+CATCH\b/i,{token:"keyword.catch"}],[/END\s+CATCH\b/i,{token:"keyword.catch"}],[/(BEGIN|CASE)\b/i,{token:"keyword.block"}],[/END\b/i,{token:"keyword.block"}],[/WHEN\b/i,{token:"keyword.choice"}],[/THEN\b/i,{token:"keyword.choice"}]]}};var r=e(64578),D=e(64650);function M(E){I.Mj.register({id:A.$.OB_MySQL}),I.Mj.setMonarchTokensProvider(A.$.OB_MySQL,m),I.Mj.setLanguageConfiguration(A.$.OB_MySQL,_),I.Mj.registerCompletionItemProvider(A.$.OB_MySQL,new t(E)),I.Mj.registerDocumentFormattingEditProvider(A.$.OB_MySQL,new r.m(E,A.$.OB_MySQL)),I.Mj.registerDocumentRangeFormattingEditProvider(A.$.OB_MySQL,new r.X(E,A.$.OB_MySQL)),I.Mj.registerInlineCompletionsProvider(A.$.OB_MySQL,new D.Z(E))}}}]);